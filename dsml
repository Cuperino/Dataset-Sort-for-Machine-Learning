#!/usr/bin/python

# dsml - Dataset Sort for Machine Learning
# Description: Organize randomly selected files from a folder into training, testing and validation subfolder according to user specified percentages.

#Copyright (c) 2018 Javier O. Cordero Pérez <javier@imaginary.tech>
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#f this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

# Imports
import argparse
import random
import os
# from os import walk
import shutil

# Parse CLI Arguments
parser = argparse.ArgumentParser(prog="dsml",
    description='Take randomly selected files and split them into training, testing and validation subfolders, according to user specified percentages.',
    epilog="dsml - Dataset Sort for Machine Learning by Javier O. Cordero Pérez, licensed under the MIT License",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument('integers', metavar='N', type=int, nargs='*', default='80 20 0', help='specify percentage groups in which to split the files: [train] [test] [validate]')
# parser.add_argument('labels', metavar='N', type=open, nargs='*', help='specify labels of percentage groups')
parser.add_argument('-R', dest='recursive', action='store_true', help='search files from subdirectories, recursively')
parser.add_argument('-m', dest='move', action='store_true', help='move files, default="copy files"')
# parser.add_argument('-cl', dest='clear', action='store_true', help='empty output folders if they contain files')
parser.add_argument('-e', dest='extensions', nargs='*', default='.png .PNG .jpg .JPG .jpeg .JPEG', help='specify file extensions to filter with')
parser.add_argument('-a', dest='also', nargs='*', default='.xml', help='Also copy or move files that share the same name as the filtered files, if they end with the following extensions')
parser.add_argument('--source', dest='source', default='./', help='path to source folder')
parser.add_argument('--destination', dest='destination', default='../', help='path to destination folder')
args = parser.parse_args()

# Get fractions' denominator: the sum of all inputed percentages
if isinstance(args.integers[0], str):
    numerators = args.integers.split(' ')
else:
    numerators = args.integers
# denominator = sum(args.integers)
# labels = args.labels
recursive = args.recursive
copy = not args.move
# clear = args.clear

# Parse extensions as tuples. Copy files with these extensions 
extensionFormats = tuple(args.extensions.split())
# Also take files with the same name and these extensions
alsoExtensions = args.also.split()

# Add '/' at end of source and destination paths
if args.source.endswith(('/')):
    sourcePath = args.source
else:
    sourcePath = args.source+'/'
if args.destination.endswith(('/')):
    outputPath = args.destination
else:
    outputPath = args.destination+'/'
trainPercentage = int(numerators[0])

# Deduce remaining percentage values if not all values are present.
if numerators[1] is not None:
    testPercentage = int(numerators[1])
else:
    testPercentage = 20
if numerators[2] is not None:
    validatePercentage = int(numerators[2])
else:
    validatePercentage = 20

trainPercentage /= 100
testPercentage /= 100
validatePercentage /= 100

# VALIDATE

# Validate percentages
if len(numerators)>3:
    print("You must specify up to three ")
    exit()

# Validate labels
# if len(labels)==0:
#   labels = numerators
# if len(labels)!=len(numerators):
#   print("You must specify as many lables as fraction numerators. Exiting...")
#   exit()

# Validate percentages
if trainPercentage<0 or testPercentage<0 or validatePercentage<0:
    print("Invalid percentate values. Exiting...")
    exit()

# PROCESS

# Prepare output folders
# Switch to root location
orginalPath = os.getcwd()
# Switch to root location
os.chdir(orginalPath)
# Switch to source location
os.chdir(outputPath)
# fullPath = os.path.dirname(os.getcwd())
fullPath = os.getcwd()
outPaths = [fullPath+"/train", fullPath+"/test", fullPath+"/validate"]
# Create set subdirectories if they don't exist
for path in outPaths:
    if not os.path.exists(path):
        os.makedirs(path)

# # If directories have pre-existing content, exit, unless clear is true.
# ...

# Switch to root location
os.chdir(orginalPath)
# Switch to source location
os.chdir(sourcePath)
fullPath = orginalPath

# Generate files list
files = []
for (dirpath, dirnames, filenames) in os.walk(fullPath):
    for filename in filenames:
        # Get all corresponding filenames in a folder
        if filename.endswith(extensionFormats):
            files.extend([[dirpath,filename]])
    # Prevent from getting filenames from sub-folders unless recursive is specified
    if not recursive:
        break

# Randomize generated file list
shuffledFiles = files
random.shuffle(shuffledFiles)

# Determine size of train, test and validate size percentages.
totalFiles = len(shuffledFiles)
trainSize = round(totalFiles*trainPercentage)
testSize = round(totalFiles*testPercentage)
validateSize = round(totalFiles*validatePercentage)

# Split selected files three sets
lastTest = trainSize+testSize
sets = []
sets.extend([shuffledFiles[:trainSize]])
sets.extend([shuffledFiles[trainSize:lastTest]])
sets.extend([shuffledFiles[lastTest:]])

# Proceed to copy files into the sub-folders 
for index, aSet in enumerate(sets):
    for file in aSet:
        if copy:
            altFilesRoot = file[1][::-1].split('.',1)[1][::-1]
            # If exists
            shutil.copyfile(file[0]+'/'+file[1], outPaths[index]+'/'+file[1])
            for extension in alsoExtensions:
                altFile = altFilesRoot + extension
                try:
                    shutil.copyfile(file[0]+'/'+altFile, outPaths[index]+'/'+altFile)
                except:
                    print("Failed to copy", altFile)
        else:
            altFilesRoot = file[1][::-1].split('.',1)[1][::-1]
            # If exists
            shutil.move(file[0]+'/'+file[1], outPaths[index]+'/'+file[1])
            for extension in alsoExtensions:
                altFile = altFilesRoot + extension
                try:
                    shutil.copyfile(file[0]+'/'+altFile, outPaths[index]+'/'+altFile) 
                except:
                    print("Failed to copy", altFile)
